Document the bugs you found, in this format:

1. [Class where bug was found]
AnimalGroupName

[Description of bug]
"Rhino" result did not equal "Crash". Case-insensitivity was not taken into account.

[What you did to fix it and get your tests to pass]
Within the "if" conditional, the parameter "animalName" needed to be changed to "animalName.toLowerCase()".
Within the "if" code block, the return was changed to "return animals.getOrDefault(animalName.toLowerCase(),"unknown");".
getOrDefault() allows value retrieval from Map. If not found, it will default to the given value which is "unknown" for this case.

Before:
if (animalName != null && animals.containsKey(animalName)) {
            return animals.get(animalName);
After:
if (animalName != null && animals.containsKey(animalName.toLowerCase())) {
            return animals.getOrDefault(animalName.toLowerCase(),"unknown");
---------------------------------------------------

2. [Class where bug was found]
CigarParty

[Description of bug]
The instructions specify that the 40 to 60 range should be inclusive.
hasMinimumCigars and withinMaxRangeofCigars are exclusive and would cause the tests to fail if 40 or 60 with no weekend were passed.

[What you did to fix it and get your tests to pass]
For the comparison operators, I converted "<" into "<=" for withinMaxRangeOfCigars and ">" into ">=" for hasMinimumCigars.

Before:
    boolean hasMinimumCigars = cigars > minimumCigarCount;
    boolean withinMaxRangeOfCigars = (!isWeekend && cigars < maximumCigarCount) || isWeekend;
After:
    boolean hasMinimumCigars = cigars >= minimumCigarCount;
    boolean withinMaxRangeOfCigars = (!isWeekend && cigars <= maximumCigarCount) || isWeekend;

---------------------------------------------------

3. [Class where bug was found]
FrontTimes

[Description of bug]
Resulting strings came out with 1 less copy than expected.
For string "Abc" and int 3, it returned "AbcAbc" instead of "AbcAbcAbc".

[What you did to fix it and get your tests to pass]
In the "if" conditional, the C-style For Loop had incorrect conditions.
"i < n - 1" was changed to "i < n" so that the proper number of loops would occur.

Before:
    if (str.length() <= 3) {
        for (int i = 0; i < n - 1; i++) {

After:
    if (str.length() <= 3) {
        for (int i = 0; i < n; i++) {

---------------------------------------------------

4. [Class where bug was found]
FrontTimes

[Description of bug]
Resulting strings came out with 1 less copy than expected.
For string "Chocolate" and int 3, it returned "ChoCho" instead of "ChoChoCho".

[What you did to fix it and get your tests to pass]
In the "else" conditional, the C-style For Loop had incorrect conditions.
"i < n - 1" was changed to "i < n" so that the proper number of loops would occur.

Before:
    } else {
        for (int i = 0; i < n - 1; i++) {

After:
    } else {
        for (int i = 0; i < n; i++) {

---------------------------------------------------

5. [Class where bug was found]
Less20

[Description of bug]
For testing if a number is one less than a multiple of 20, the tests would not pass.
Having "this.n" incorrectly tries to access the parameter n from a class.

[What you did to fix it and get your tests to pass]
For the boolean statement, I changed "this.n" to simply "n".

Before:
    this.n % 20 == 19;
After:
    n % 20 == 19;

---------------------------------------------------

6. [Class where bug was found]
Less20

[Description of bug]
For testing if a number is two less than a multiple of 20, the tests would not pass.
Having "this.n" incorrectly tries to access the parameter n from a class.

[What you did to fix it and get your tests to pass]
For the boolean statement, I changed "this.n" to simply "n".

Before:
    this.n % 20 == 18;
After:
    n % 20 == 18;

---------------------------------------------------

7. [Class where bug was found]
Lucky13

[Description of bug]
getLucky() condition required that both 1 AND 3 must not be nums[i] in order to evaluate to 'false'.
Instead nums[i] must not be 1 OR 3.

[What you did to fix it and get your tests to pass]

Before:
    if (nums[i] == 1 && nums[i] == 3) {
After:
    if (nums[i] == 1 || nums[i] == 3) {

---------------------------------------------------


8. [Class where bug was found]
WordCount

[Description of bug]
getCount() does not correctly apply the sum of word instances found within the array.
Counts first instance of each element but does not update count.

[What you did to fix it and get your tests to pass]
Within the "if" statement of the For-Each Loop, the condition was "!output.containsValue(word)".
This is incorrect since the key (not value) is what must be checked.

Before:
    if (!output.containsValue(word)) {

After:
    if (!output.containsKey(word)) {









